SmartQuery
==========

SmartQuery is a search|hub module that maps similar queries (e.g. "skate board", "skate boarding", "skateboards", "skateboard") to the best [1]_ query - we call it the MasterQuery.
It automatically connects to the search|hub API in order to get the required data and to send back statistics and performance information about the module itself and the mapping process.

.. [1] There are also use cases, where we have ambiguous mappings that lead to several MasterQueries. They will get a special handling in the future. The best query means the best in terms of user interaction and economic outcome.


Requirements
------------

- Java with version >=1.8
- around 200MB to 500MB additional Java Heapspace (depending on the amount of data it has to manage)
- If a firewall is used, it needs to be configured to allow connections to the HTTPS Endpoints https://query.searchhub.io/ and https://import.searchhub.io/


Direct Integration
------------------

Maven Dependency
^^^^^^^^^^^^^^^^

The SmartQuery library can be pulled as a maven dependency from our private repository https://nexus.commerce-experts.com/content/repositories/searchhub-external/ [2]_.

.. [2] Access credentials to the private repository are provided separately.

::

    <dependency>
        <groupId>io.searchhub</groupId>
        <artifactId>smartquery</artifactId>
        <version>0.10.6</version>
    </dependency>
    
    <!-- ... -->
    
    <repository>
        <id>external-releases</id>
        <url>https://nexus.commerce-experts.com/content/repositories/searchhub-external/</url>
    </repository>


Library Usage
^^^^^^^^^^^^^

The library contains the following three central types:

Tenant
  Simple POJO that represents a single data domain. See :ref:`What is the Tenant? <tenant>` at the `Ingestion`_ section
  

QueryMapper
  The central component provided by the SmartQuery library is the `QueryMapper`. It provides a single and simple method `mapQuery`.

  :String mapQuery(String input):
  
    This method returns a mapped string, if the mapping process was successful and `null` if not. In such case the input String should be used.

QueryMapperManager
  This class is responsible to initialize and manage the QueryMappers for the required Tenants. It needs to be instantiated with the provided API key [3]_. 
  It's necessary to use a single `QueryMapperManager` object and keep the reference to it, since it will internally spawn and manage several threads to update the `QueryMapper` instances asynchronously.
  
  :QueryMapper getQueryMapper(Tenant t):
  
    The `getQueryMapper` method will always return the same instance of `QueryMapper` for the same given `Tenant`, so it's not necessary to keep a reference of the `QueryMapper`. Keeping a reference of a `QueryMapper` instance isn't a problem though, since each `QueryMapper` will be updated in the background.
    
    A non existing tenant won't cause an error but simply return a QueryMapper that always returns `null`.

.. [3] You'll receive your personal API Key directly from us.


Usage Example
^^^^^^^^^^^^^

.. code-block:: java

    private QueryMapperManager qmManager = new QueryMapperManager("YourApiKey");

    public String getSearchQuery(String userQuery)
    {
        Tenant tenant = new Tenant("example", "com");
        QueryMapper qm = qmManager.getQueryMapper(tenant);
        
        String mappedQuery = qm.mapQuery(userQuery);
        return mappedQuery != null ? mappedQuery : userQuery;
    }


REST Service Integration
------------------------

In case you can't use the Java library directly (most likely because your system doesn't run on the JVM), you can use the REST-service wrapper for smartquery. It's delivered as a docker image and has to run in your environment.

Start the service
^^^^^^^^^^^^^^^^^

The docker image is hosted on AWS at the eu-central-1 region under the registry ID 399621189843.

Docker Image
  `399621189843.dkr.ecr.eu-central-1.amazonaws.com/smartquery/smartquery-service:0.10.6`

Since the image is hosted at AWS, you need an AWS account to get the image. From an instance with `awscli installed`_ you have to perform a `docker login`_ before pulling the image.

.. code-block:: bash

    # use exactly this registry ID
    bash -c "$(aws ecr get-login --registry-ids 399621189843 --region eu-central-1 --no-include-email)"

The container has to be started with your API key set at the environment variable `SQ_API_KEY`. 
It exposes port 8081 that can be mapped to any port. Please consider, that the docker container needs access to the remote URLs mentioned above at the Requirements_ section.

.. code-block:: bash
    
    # use the API key you'll receive from us
    docker run -d --name=smartquery-service -e SQ_API_KEY=<YourS3cr3tAPIkey> -P 399621189843.dkr.ecr.eu-central-1.amazonaws.com/smartquery/smartquery-service:0.10.6


Use the service
^^^^^^^^^^^^^^^

The service offers a single endpoint with a single method. To get a mapping, please send request with the placeholders resolved.

Service Endpoint
  `http://<host>:<port>/smartquery/v1/<tenant-name>/<tenant-channel>?userQuery=<user-query>`

For Example:

.. code-block:: bash

    curl localhost:10240/smartquery/v1/test/working?userQuery=bierzellt -o -
    # returns 'bierzelt' on success
    # returns 'bierzellt' if no mapping was found or no data is available

The response is a simple string that either contains a mapped query or in case no mapping was found, it'll contain the input query.

Keep in mind, that smartquery starts fetching the mapping data, after the first request for a specific tenant was received. So the first ~5 seconds all mappings will return the input query as response, because no mapping data was fetched. A few seconds later you should get changed queries (if data is available).


Trouble Shooting
################

  - If you forgot to specifiy the API key, the container won't start.
  - In case you tried to access an unpermitted tenant/channel (maybe because you specified the wrong API key), you will see such a message in the logs of the service: `update failed: FeignException: status 403 reading QueryApiTarget#getModificationTime(Tenant); content: {"message":"Invalid authentication credentials"}`
  - To get more information about the internal processes, enable debug log. Do that with the docker startup parameter `-e JAVA_OPTS="-Dlogging.level.io.searchhub=DEBUG"`


.. _Ingestion: ingestion.html
.. _docker login: https://docs.aws.amazon.com/cli/latest/reference/ecr/get-login.html
.. _awscli installed: https://docs.aws.amazon.com/cli/latest/userguide/awscli-install-linux.html
.. _



