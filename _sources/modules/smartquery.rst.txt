Module: SmartQuery
==================

SmartQuery is a SearchHub module that maps similar queries (e.g. "skate board", "skate boarding", "skateboards", "skateboard") to the best [1]_ query - we call it the MasterQuery.
It is connected to the SearchHub API where it gets the required data and sends back statistics and performance information.

.. [1] There are also use cases, where we have ambiguous mappings that lead to several MasterQueries. They will get a special handling in the future.


Requirements
------------

- Java with version >=1.8
- around 200MB to 500MB additional Java Heapspace (depending on the amount of data it has to manage)
- If a firewall is used, it needs to be configured to allow connections to the HTTPS Endpoints https://query.searchhub.io/ and https://import.searchhub.io/


Direct Integration
------------------

Maven Dependency
^^^^^^^^^^^^^^^^

The SmartQuery library can be pulled as a maven dependency from the private repository https://nexus.commerce-experts.com/content/repositories/searchhub-external/ [2]_.

.. [2] Access credentials to the private repository are provided separately.

::

    <dependency>
        <groupId>io.searchhub</groupId>
        <artifactId>smartquery</artifactId>
        <version>0.10.1</version>
    </dependency>
    
    <!-- ... -->
    
    <repository>
        <id>external-releases</id>
        <url>https://nexus.commerce-experts.com/content/repositories/searchhub-external/</url>
    </repository>


Library Usage
^^^^^^^^^^^^^

Tenant
  A tenant represents the reference to the according customer domain. It consists of two values::
  
  1) the basic "name", which normally would be the customer name
  
  2) a "channel", which gives a second level of segment separation. That can be for example a separation by language (en, de, ..) or by sales channel (mobile, www, ..).
  
  Both values need a common agreement between the client implementation (you) and the service provider (us/CXP).
  

QueryMapper
  The central component provided by the SmartQuery library is the `QueryMapper`. It provides a the single and simple method `mapQuery`.

  :String mapQuery(String input):
  
    This method returns a mapped string, if a mapping could be found and `null` if no mapping could be found. In such a case the input String should be used.

QueryMapperManager
  This class is responsible to initialize and manage the QueryMappers for the required Tenants. It needs be instantiated with the provided API key [3]_. It is recommended to use a single `QueryMapperManager` object, since it will internally spawn and manage several threads to update the `QueryMapper` instances asynchronously.
  
  :QueryMapper getQueryMapper(Tenant t):
  
    The `getQueryMapper` method will always return the same instance of `QueryMapper` for the same given `Tenant`, so it's not necessary to keep a reference of the `QueryMapper`. Keeping a reference of a `QueryMapper` isn't a problem though, since each `QueryMapper` instance will be updated directly in the background.
    
    A non existing tenant won't cause an error but simply return a QueryMapper that always returns `null`.

.. [3] You'll receive your personal API Key directly from us.


Usage Example
^^^^^^^^^^^^^

::

    private QueryMapperManager qmManager = new QueryMapperManager("YourApiKey");

    public String getSearchQuery(String userQuery)
    {
        Tenant tenant = new Tenant("example", "com");
        QueryMapper qm = qmManager.getQueryMapper(tenant);
        
        String mappedQuery = qm.mapQuery(userQuery);
        if (mappedQuery != null) return mappedQuery;
        else return userQuery;
    }

